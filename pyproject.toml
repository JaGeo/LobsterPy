[build-system]
requires = [
  "setuptools>=65.0.0",
  "wheel",
]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]
include = ["lobsterpy*"]
#exclude = ["docs*", "tests*", "paper*"]

[project]
name = "lobsterpy"
description = "Package for automatic bonding analysis with Lobster/VASP"
readme = "README.md"
keywords = ["high-throughput", "automated", "lobsteroutput", "bonding-analysis"]
license = { text = "BSD 3-Clause" }
authors = [{ name = "Janine George", email = "janine.george@bam.de" }]
version = "0.5.0"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
]
requires-python = ">=3.10,<3.13"
dependencies = [
     "pymatgen>=2024.10.22",
     "numpy<3.0.0",
     "typing",
]

[tool.setuptools.package-data]
"lobsterpy.plotting" = ["lobsterpy_base.mplstyle"]

[project.urls]
homepage = "https://jageo.github.io/LobsterPy/"
repository = "https://github.com/JaGeo/LobsterPy"
documentation = "https://jageo.github.io/LobsterPy/"
changelog = "https://jageo.github.io/LobsterPy/about/changelog.html"

[project.optional-dependencies]
featurizer = ["mendeleev==0.18.1"]
dev = ["pre-commit>=2.12.1"]
tests = ["pytest", "pytest-mock", "pytest-split", "pytest-cov", "types-setuptools"]
docs = [
    "sphinx-copybutton==0.5.2",
    "sphinx>=5,<9",
    "sphinx_design==0.6.1",
    "myst-nb==1.1.2",
    "sphinx-book-theme==1.1.3",
    "sphinx-argparse==0.5.2",
    "sphinx-toolbox==3.8.1",
]

[project.scripts]
lobsterpy = "lobsterpy.cli:main"

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.1"


[tool.cibuildwheel.linux]
archs = ["auto64"]
skip = ["*musllinux*"]
before-all = "ln -s /usr/lib64/libgfortran.so.5 /usr/lib64/libgfortran.so.3"

[tool.cibuildwheel.macos]
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel} --ignore-missing-dependencies"

[tool.ruff]
target-version = "py39"
line-length = 120

[tool.ruff.lint]
select = [
  "B",      # flake8-bugbear
  "C4",     # flake8-comprehensions
  "D",      # pydocstyle
  "E",      # pycodestyle error
  "EXE",    # flake8-executable
  "F",      # pyflakes
  "FA",     # flake8-future-annotations
  "FBT003", # boolean-positional-value-in-call
  "FLY",    # flynt
  "I",      # isort
  "ICN",    # flake8-import-conventions
  "ISC",    # flake8-implicit-str-concat
  "PD",     # pandas-vet
  "PERF",   # perflint
  "PIE",    # flake8-pie
  "PL",     # pylint
  "PT",     # flake8-pytest-style
  "PYI",    # flakes8-pyi
  "Q",      # flake8-quotes
  "RET",    # flake8-return
  "RSE",    # flake8-raise
  "RUF",    # Ruff-specific rules
  "SIM",    # flake8-simplify
  "SLOT",   # flake8-slots
  "TCH",    # flake8-type-checking
  "TID",    # tidy imports
  "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # pycodestyle warning
  "YTT",    # flake8-2020
]
ignore = [
  "B006",    # Do not use mutable data structures for argument defaults
  "B023",    # Function definition does not bind loop variable
  "B028",    # No explicit stacklevel keyword argument found
  "B904",    # Within an except clause, raise exceptions with ...
  "C408",    # unnecessary-collection-call
  "D105",    # Missing docstring in magic method
  "D205",    # 1 blank line required between summary line and description
  "D212",    # Multi-line docstring summary should start at the first line
  "PD901",   # pandas-df-variable-name
  "PERF203", # try-except-in-loop
  "PERF401", # manual-list-comprehension
  "PLR",     # pylint refactor
  "PLW2901", # Outer for loop variable overwritten by inner assignment target
  "PT013",   # pytest-incorrect-pytest-import
  "PYI024",  # collections-named-tuple
  "RUF012",  # Disable checks for mutable class args. This is a non-problem.
  "SIM105",  # Use contextlib.suppress(OSError) instead of try-except-pass
  "SIM114",  # Combine `if` branches using logical `or` operator
  "TCH002",  # Move third-party import into a type-checking block
]
pydocstyle.convention = "google"

[tool.pydocstyle]
ignore = "D100,D104,D105,D106,D107,D200,D203,D205,D212,D213,D301,D400,D401,D402,D403,D404,D406,D407,D413,D415"

isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"**/tests/*" = ["D"]

[tool.pytest.ini_options]
addopts = "-x --durations=30 --quiet -rxXs --color=yes -p no:warnings"

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "@deprecated",
  "show_plot",
  "if typing.TYPE_CHECKING:",
]

[tool.coverage.run]
include = ["src/"]
omit = [
    # omit anything in test directory anywhere
    "tests/*",
]

[tool.mypy]
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true
no_implicit_optional = false


[tool.codespell]
ignore-words-list = "titel,alls,ans,nd,mater,nwo,te,hart,ontop,ist,ot,fo"
check-filenames = true

[tool.pyright]
typeCheckingMode = "off"
reportPossiblyUnboundVariable = false
reportUnboundVariable = true
reportMissingImports = false
reportMissingModuleSource = false
reportInvalidTypeForm = false
exclude = ["**/tests"]
